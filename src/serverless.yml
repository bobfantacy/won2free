# org: won2free
app: won2free
service: won2free-core
frameworkVersion: '4'

stages:
  default:
    params:
      schedule1: cron(0 0 ? * * 2020)
      schedule2: cron(0 0 ? * * 2020)
      schedule_daily: cron(1 0 ? * * 2020)
      QUEUE_NAME: test.fifo
  prod:
    params:
      schedule1: cron(1/2 * ? * * *)
      schedule2: cron(0/2 * ? * * *)
      schedule_daily: cron(1 0 ? * * *)
      QUEUE_NAME: won2free.fifo
provider:
  name: aws
  runtime: python3.10
  region: ap-east-1
  memorySize: 128
  timeout: 10
  versionFunctions: true
  logRetentionInDays: 3
  # versioning: true
  environment:
    QUEUE_NAME: ${param:QUEUE_NAME} 
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
            - dynamodb:CreateTable
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:SendMessage
            - sqs:GetQueueUrl
            - sqs:DeleteMessage
            - sqs:CreateQueue
          Resource: "arn:aws:sqs:${aws:region}:${aws:accountId}:${param:QUEUE_NAME}"

functions:
  get_lending_plans:
    handler: httpapi.lending_plan.get_lending_plans
    events:
      - http:
          path: api/get_lending_plans
          method: post
          authorizer: jwt_auth
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
  save_lending_plan:
    handler: httpapi.lending_plan.save_lending_plan
    events:
      - http:
          path: api/save_lending_plan
          method: post
          authorizer: jwt_auth
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}      
  del_lending_plan:
    handler: httpapi.lending_plan.del_lending_plan
    events:
      - http:
          path: api/del_lending_plan
          method: post
          authorizer: jwt_auth
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}      
  get_accounts:
    handler: httpapi.account.get_accounts
    events:
      - http:
          path: api/accounts
          method: get
          authorizer: jwt_auth
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
  save_account:
    handler: httpapi.account.save_account
    events:
      - http:
          path: api/save_accounts
          method: POST
          authorizer: jwt_auth
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
  del_account:
    handler: httpapi.account.del_account
    events:
      - http:
          path: api/del_account
          method: POST
          authorizer: jwt_auth
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
  jwt_auth:
    handler: httpapi.jwt_auth.auth
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
      - arn:aws:lambda:ap-east-1:770693421928:layer:Klayers-p310-cryptography:14
    environment:
      JWT_SECRET: ${file(./serverless.env.yml):JWT_SECRET}
    # cors: true
  publicEndpoint:
    handler: httpapi.jwt_auth.public_endpoint
    events:
      - http:
          path: api/public
          method: post
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
      - arn:aws:lambda:ap-east-1:770693421928:layer:Klayers-p310-cryptography:14
  privateEndpoint:
    handler: httpapi.jwt_auth.private_endpoint
    events:
      - http:
          path: api/private
          method: get
          authorizer: jwt_auth
          cors: true
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
      - arn:aws:lambda:ap-east-1:770693421928:layer:Klayers-p310-cryptography:14
  tg_login_auth:
    handler: tgbot.tg_login_auth.auth
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
      - arn:aws:lambda:ap-east-1:770693421928:layer:Klayers-p310-cryptography:14
    events:
      - http: 
          cors: true
          method: post
          path: /auth/telegram
    environment:
      QUEUE_NAME: ${param:QUEUE_NAME}
      TG_TOKEN: ${file(./serverless.env.yml):TG_TOKEN}
      JWT_SECRET: ${file(./serverless.env.yml):JWT_SECRET}
  tg_miniapp_auth:
    handler: tgbot.tg_miniapp_auth.auth
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
      - arn:aws:lambda:ap-east-1:770693421928:layer:Klayers-p310-cryptography:14
    events:
      - http: 
          cors: true
          method: post
          path: /auth/miniapp
    environment:
      TG_TOKEN: ${file(./serverless.env.yml):TG_TOKEN}
      JWT_SECRET: ${file(./serverless.env.yml):JWT_SECRET}
  webhook:
    handler: tgbot.handler.webhook
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
    events:
      - http: POST /
    environment:
      QUEUE_NAME: ${param:QUEUE_NAME}
      TG_TOKEN: ${file(./serverless.env.yml):TG_TOKEN}
      MINIAPP_URL: ${file(./serverless.env.yml):MINIAPP_URL}

  set_webhook:
    handler: tgbot.handler.set_webhook
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
    events:
      - http: POST /set_webhook
    environment:
      QUEUE_NAME: ${param:QUEUE_NAME}
      TG_TOKEN: ${file(./serverless.env.yml):TG_TOKEN}
  init:
    handler: init/lambda_function.lambda_handler
    timeout: 60
  job-TradeStatusCheck:
    handler: job.jobEvent.TradeStatusCheck
    events:
      - schedule: ${param:schedule1}
  job-ReArrangeOffer:
    handler: job.jobEvent.ReArrangeOffer
    events:
      - schedule: ${param:schedule1}
  job-AutoFundingRate:
    handler: job.jobEvent.AutoFundingRate
    events:
      - schedule: ${param:schedule_daily}
  job-TradeReport:
    handler: job.jobEvent.TradeReport
    events:
      - schedule: ${param:schedule_daily}
  reactor:
    handler: reactor/lambda_function.lambda_handler
    layers:
      - arn:aws:lambda:${aws:region}:${aws:accountId}:layer:${file(./serverless.env.yml):LAYER_NAME}
      - arn:aws:lambda:ap-east-1:839552336658:layer:AWSSDKPandas-Python310:19
    events:
      - sqs: arn:aws:sqs:${aws:region}:${aws:accountId}:${param:QUEUE_NAME}
    environment:
      QUEUE_NAME: ${param:QUEUE_NAME}
      TG_TOKEN: ${file(./serverless.env.yml):TG_TOKEN}
    memorySize: 256
    timeout: 30
package:
  # Directories and files to include in the deployed package
  patterns:
    - "!node_modules"
    - '!.git/**'
    - '!.travis.yml'
    - '!package.json'
    - '!package-lock.json'
    - '!requirements.txt'
    - '!serverless.env.yml'
resources:
  Resources:
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'